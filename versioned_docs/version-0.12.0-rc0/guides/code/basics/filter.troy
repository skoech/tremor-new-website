# Our main flow
define flow main
flow
  # import the `troy::connectors` module
  use troy::connectors;

  # define our own main pipeline
  define pipeline main
  # the exit port is not a dafault port so we have to overwrite the built in port selection
  into out, exit
  pipeline
    # use the `std::string` module
    use std::string;

    # define our script
    define script punctuate
    script
      # Short circuit if we already end with a punctuation
      match event of
        case ~re|[.?!]$| => emit event
        case _ => null
      end;

      # Find the right punctuation by looking at the first wird of the last sentence
      # yes this is a poor heuristic!
      let punctuation = match event of 
        case ~ re|.*[.?!]?(Why\|How\|Where\|Who)[^.?!]*$| => "?"
        case _ => "."
      end;
      event + punctuation
    end;

    # Create our script
    create script punctuate;

    # filter eany event that just is `"exit"` and send it to the exit port
    select null from in where event == "exit" into exit;

    # Wire our capitailized text to the script
    select string::capitalize(event) from in where event != "exit" into punctuate;
    # Wire our script to the output
    select event from punctuate into out;
  end;
  # Define the exit connector
  define connector exit from exit;

  # create the exit connector;
  create connector exit;

  # create an instance of the console connector
  create connector console from connectors::console;

  # create an instance of the passthrough pipeline
  create pipeline main;

  # connect the console (STDIN) to our pipeline input
  connect /connector/console to /pipeline/main;

  # then connect the pipeline output to the console (STDOUT)
  connect /pipeline/main to /connector/console;

  # connect the `exit` port of our pipeline to the exit connector
  connect /pipeline/main/exit to /connector/exit;

end;
# Deploy the flow so tremor starts it
deploy flow main;