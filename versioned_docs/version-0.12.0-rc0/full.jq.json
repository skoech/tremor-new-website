{
  "pandoc-api-version": [
    1,
    22,
    1
  ],
  "meta": {},
  "blocks": [
    {
      "t": "Header",
      "c": [
        1,
        [
          "full-grammar",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Full"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Grammar"
          }
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-use",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Use"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Imports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "external"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "source"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "use"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "current"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "source"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "file."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "contents"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "source"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "file"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "tremor_path",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "TREMOR_PATH"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TREMOR_PATH"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "environment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "variable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ":"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "paths."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Each"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "absolute"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "relative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "directory."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "When"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "relative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "paths"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "relative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "working"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "directory"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "where"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "tremor"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "executable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "executed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "standard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "library"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MUST"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "added"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "accessible"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripts."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/use.svg\" alt=\"Use\" width=\"449\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Use ::=\n     'use' ModularTarget \n  |  'use' ModularTarget  'as' Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "modules",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Modules"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripts."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Scripts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "store"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "constant"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Scripts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stored"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ".tremor"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "files."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "queries."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Queries"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "store"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Scripts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stored"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ".trickle"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "files."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "deployments."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Deployments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "store"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "flow"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Deployments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stored"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ".troy"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "files."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        4,
        [
          "conditioning",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Conditioning"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "resolved"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TREMOR_PATH"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "environment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "variable."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "variable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "refer"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "multiple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "directory"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "paths,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "each"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ":"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "colon."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "relative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "directory"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "structure"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "base"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "file"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "source"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "file"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "relative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "constraints",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Constraints"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "It"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "recommended"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "have"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "overlapping"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "shared"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "directories"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "across"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "paths"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "It"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "recommended"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "have"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "multiple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mapping"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "same"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifier."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-configdirectives",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConfigDirectives"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConfigDirectives"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "line"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compiler,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "interpreter"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "runtime"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "hints"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specified."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/configdirectives.svg\" alt=\"ConfigDirectives\" width=\"421\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConfigDirectives ::=\n    ConfigDirective ConfigDirectives \n  | ConfigDirective \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-configdirective",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConfigDirective"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConfigDirective"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "directive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Directives"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MUST"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "begin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "new"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "line"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "#!config"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "shebang"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "config"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "token."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/configdirective.svg\" alt=\"ConfigDirective\" width=\"269\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConfigDirective ::=\n     '#!config' WithExpr \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "providing-a-metrics-internal-via-a-config-directive",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Providing"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "a"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "metrics"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "internal"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "via"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "a"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "config"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "directive"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "# Enable metrics with a 10 second interval\n#!config metrics_interval_s = 10"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-argswithend",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArgsWithEnd"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArgsWithEnd"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arguments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "end"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/argswithend.svg\" alt=\"ArgsWithEnd\" width=\"405\" height=\"77\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArgsWithEnd ::=\n    ArgsClause ?  WithEndClause \n  | \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-definitionargs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DefinitionArgs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DefinitionArgs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arguments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "without"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "end"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/definitionargs.svg\" alt=\"DefinitionArgs\" width=\"223\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DefinitionArgs ::=\n    ArgsClause ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-argsclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArgsClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArgsClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "marks"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "beginning"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arguments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "has"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "many"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "argument"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Quoted",
          "c": [
            {
              "t": "SingleQuote"
            },
            [
              {
                "t": "Str",
                "c": ","
              }
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/argsclause.svg\" alt=\"ArgsClause\" width=\"245\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArgsClause ::=\n     'args' ArgsExprs \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-argsexprs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArgsExprs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArgsExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "invocation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Sep"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "args"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "argument"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/argsexprs.svg\" alt=\"ArgsExprs\" width=\"331\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArgsExprs ::=\n    Sep!(ArgsExprs, ArgsExpr, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-argsexpr",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArgsExpr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/argsexpr.svg\" alt=\"ArgsExpr\" width=\"331\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArgsExpr ::=\n    Ident  '=' ExprImut \n  | Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-creationwithend",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CreationWithEnd"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreationWithEnd"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "with"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "terminal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "end"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "keyword."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/creationwithend.svg\" alt=\"CreationWithEnd\" width=\"247\" height=\"64\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CreationWithEnd ::=\n    WithEndClause \n  | \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-creationwith",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CreationWith"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreationWit"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "with"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "without"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "terminal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "end"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "keyword."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/creationwith.svg\" alt=\"CreationWith\" width=\"223\" height=\"64\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CreationWith ::=\n    WithClause \n  | \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-withclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WithClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WithClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "with"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WithExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/withclause.svg\" alt=\"WithClause\" width=\"245\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WithClause ::=\n     'with' WithExprs \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-withendclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WithEndClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/withendclause.svg\" alt=\"WithEndClause\" width=\"245\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WithEndClause ::=\n    WithClause  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-withexprs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WithExprs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WithExprs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WithExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/withexprs.svg\" alt=\"WithExprs\" width=\"331\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WithExprs ::=\n    Sep!(WithExprs, WithExpr, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-withexpr",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WithExpr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WithExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binding."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/withexpr.svg\" alt=\"WithExpr\" width=\"283\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WithExpr ::=\n    Ident  '=' ExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "form",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Form"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [],
          []
        ],
        "name = <value>"
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Where:"
        }
      ]
    },
    {
      "t": "BulletList",
      "c": [
        [
          {
            "t": "Plain",
            "c": [
              {
                "t": "Code",
                "c": [
                  [
                    "",
                    [],
                    []
                  ],
                  "name"
                ]
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "is"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "an"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "identifier."
              }
            ]
          }
        ],
        [
          {
            "t": "Plain",
            "c": [
              {
                "t": "Code",
                "c": [
                  [
                    "",
                    [],
                    []
                  ],
                  "<value>"
                ]
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "is"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "any"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "valid"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "immutable"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "expression."
              }
            ]
          }
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "snot = \"badger\""
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modulebody",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModuleBody"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModuleBody"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structure"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "begin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MUST"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "define"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "least"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "but"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "define"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "many."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Statements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modulebody.svg\" alt=\"ModuleBody\" width=\"293\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModuleBody ::=\n    ModComment ModuleStmts \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modulefile",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModuleFile"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModuleFile"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compilation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modulefile.svg\" alt=\"ModuleFile\" width=\"341\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModuleFile ::=\n    ModuleBody  '<end-of-stream>' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modulestmts",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModuleStmts"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModuleStmts"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModuleStmt"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modulestmts.svg\" alt=\"ModuleStmts\" width=\"395\" height=\"87\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModuleStmts ::=\n    ModuleStmt  ';' ModuleStmts \n  | ModuleStmt  ';' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modulestmt",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModuleStmt"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModuleStmt"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "types"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modulestmt.svg\" alt=\"ModuleStmt\" width=\"263\" height=\"339\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModuleStmt ::=\n    Use \n  | Const \n  | FnDefn \n  | Intrinsic \n  | DefineWindow \n  | DefineOperator \n  | DefineScript \n  | DefinePipeline \n  | DefineConnector \n  | DefineFlow \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modulartarget",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModularTarget"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModularTarget"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "indexes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor’s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "In"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "module"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "file"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "file"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "system."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "module"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compilation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModularTarget"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "::"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "double-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifiers."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Leading"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "::"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supported"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modular"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "target.."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Trailing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "::"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supported"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modular"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "target."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modulartarget.svg\" alt=\"ModularTarget\" width=\"331\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModularTarget ::=\n    Ident \n  | ModPath  '::' Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "examples",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Examples"
          }
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        4,
        [
          "loading-and-using-a-builtin-function",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Loading"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "and"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "using"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "a"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "builtin"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "function"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "# Load the base64 utilities\nuse std::base64;\n\n# Base64 encode the current `event`.\nbase64::encode(event)"
      ]
    },
    {
      "t": "Header",
      "c": [
        4,
        [
          "loading-and-using-a-builtin-function-with-an-alias",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Loading"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "and"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "using"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "a"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "builtin"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "function"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "with"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "an"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "alias"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "# Load the base64 utilities\nuse std::base64 as snot;\n\n# Base64 encode the current `event`.\nsnot::encode(event)"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-doccomment",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DocComment"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DocComment"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "documentation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Documentation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "documentation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "begins"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "##"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "double-hash"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "they"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "line"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Muliple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "successive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "coalesced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "together"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "complete"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comment."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "content"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "documentation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "markdown"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/doccomment.svg\" alt=\"DocComment\" width=\"231\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DocComment ::=\n    ( DocComment_ ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-doccomment_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DocComment_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DocComment_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DocComment"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/doccomment_.svg\" alt=\"DocComment_\" width=\"381\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DocComment_ ::=\n     '<doc-comment>' \n  | DocComment_  '<doc-comment>' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modcomment",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModComment"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModComment"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Documentation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "documentation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "begins"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "###"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "triple-hash"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "they"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "line"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Muliple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "successive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "coalesced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "together"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "complete"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comment."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "content"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "documentation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "markdown"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modcomment.svg\" alt=\"ModComment\" width=\"231\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModComment ::=\n    ( ModComment_ ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example-1",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "level"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "throughput"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "standard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "library"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "our"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "document"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "generation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "process."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Here"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modified"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "snippet"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "standard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "library"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "illustrate"
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "### The tremor language standard library it provides the following modules:\n###\n### * [array](std/array.md) - functions to deal with arrays (`[]`)\n### * [base64](std/base64.md) - functions for base64 en and decoding\n### * [binary](std/base64.md) - functions to deal with binary data (`<< 1, 2, 3 >>`)\n### * [float](std/float.md) - functions to deal with floating point numbers\n### * [integer](std/integer.md) - functions to deal with integer numbers\n### * [json](std/json.md) - functions to deal with JSON\n..."
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modcomment_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModComment_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModComment_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModComment"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modcomment_.svg\" alt=\"ModComment_\" width=\"381\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModComment_ ::=\n     '<mod-comment>' \n  | ModComment_  '<mod-comment>' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-deploy",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Deploy"
          }
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "deployment-language-entrypoint",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Deployment"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Language"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Entrypoint"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "This"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "top"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "level"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "deployment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "troy"
          ]
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/deploy.svg\" alt=\"Deploy\" width=\"713\" height=\"100\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Deploy ::=\n    ConfigDirectives ModComment DeployStmts  '<end-of-stream>' ?  \n  | ModComment DeployStmts  '<end-of-stream>' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-deploystmts",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DeployStmts"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DeployStmts"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "deployment"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "module."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Statements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "deployment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "There"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MUST"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "least"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "There"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MAY"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "more"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "than"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/deploystmts.svg\" alt=\"DeployStmts\" width=\"395\" height=\"87\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DeployStmts ::=\n    DeployStmt  ';' DeployStmts \n  | DeployStmt  ';' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-deploystmt",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DeployStmt"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DeployStmt"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "constrains"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ".troy"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "deployment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Importing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "use"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allowed."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Flow"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "deploy"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "commands"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allowed."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/deploystmt.svg\" alt=\"DeployStmt\" width=\"255\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DeployStmt ::=\n    DefineFlow \n  | DeployFlowStmt \n  | Use \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-deployflowstmt",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DeployFlowStmt"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/deployflowstmt.svg\" alt=\"DeployFlowStmt\" width=\"827\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DeployFlowStmt ::=\n    DocComment  'deploy'  'flow' Ident  'from' ModularTarget CreationWithEnd \n  | DocComment  'deploy'  'flow' Ident CreationWithEnd \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-connectorkind",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConnectorKind"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConnectorKind"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Connectors"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "They"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "resolved"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "through"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifier."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "examples-1",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Examples"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "http_server"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "HTTP"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "server"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "metronome"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "periodic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "metronome."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/connectorkind.svg\" alt=\"ConnectorKind\" width=\"135\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConnectorKind ::=\n    Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-flowstmts",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FlowStmts"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FlowStmts"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mandatory"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FlowStmtInner"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/flowstmts.svg\" alt=\"FlowStmts\" width=\"175\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FlowStmts ::=\n    FlowStmts_ \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-flowstmts_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FlowStmts_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FlowStmts_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FlowStmtInner"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/flowstmts_.svg\" alt=\"FlowStmts_\" width=\"379\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FlowStmts_ ::=\n    Sep!(FlowStmts_, FlowStmtInner, \";\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-createkind",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CreateKind"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreateKind"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "encapsulates"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "artefact"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "types"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "created"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "deploymant"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/createkind.svg\" alt=\"CreateKind\" width=\"231\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CreateKind ::=\n     'connector' \n  |  'pipeline' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-flowstmtinner",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FlowStmtInner"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FlowStmtInner"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "body"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "flow"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/flowstmtinner.svg\" alt=\"FlowStmtInner\" width=\"199\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FlowStmtInner ::=\n    Define \n  | Create \n  | Connect \n  | Use \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-define",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Define"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Define"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connectors"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipelines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specified."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/define.svg\" alt=\"Define\" width=\"263\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Define ::=\n    DefinePipeline \n  | DefineConnector \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-create",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Create"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Create"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "creates"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instances"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connectors"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipelines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "flow."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/create.svg\" alt=\"Create\" width=\"749\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Create ::=\n     'create' CreateKind Ident  'from' ModularTarget CreationWithEnd \n  |  'create' CreateKind Ident CreationWithEnd \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-connect",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Connect"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Connect"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "routes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "between"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connectors"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipelines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "running"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "flow."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/connect.svg\" alt=\"Connect\" width=\"749\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Connect ::=\n     'connect'  '/' ConnectFromConnector  'to'  '/' ConnectToPipeline \n  |  'connect'  '/' ConnectFromPipeline  'to'  '/' ConnectToConnector \n  |  'connect'  '/' ConnectFromPipeline  'to'  '/' ConnectToPipeline \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-connectfromconnector",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConnectFromConnector"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConnectFromConnector"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "route"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instance."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/connectfromconnector.svg\" alt=\"ConnectFromConnector\" width=\"409\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConnectFromConnector ::=\n     'connector'  '/' Ident MaybePort \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-connectfrompipeline",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConnectFromPipeline"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConnectFromPipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "route"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instance."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/connectfrompipeline.svg\" alt=\"ConnectFromPipeline\" width=\"401\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConnectFromPipeline ::=\n     'pipeline'  '/' Ident MaybePort \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-connecttopipeline",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConnectToPipeline"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConnectToPipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "route"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instance."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/connecttopipeline.svg\" alt=\"ConnectToPipeline\" width=\"401\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConnectToPipeline ::=\n     'pipeline'  '/' Ident MaybePort \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-connecttoconnector",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConnectToConnector"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConnectToConnector"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "route"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instance."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/connecttoconnector.svg\" alt=\"ConnectToConnector\" width=\"409\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConnectToConnector ::=\n     'connector'  '/' Ident MaybePort \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-defineconnector",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DefineConnector"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DefineConnector"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "artefact"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connect"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "outside"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "world,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "outside"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connect"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "send"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and/or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "receive"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "data."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connector"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "parameterized"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instanciated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Create"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/defineconnector.svg\" alt=\"DefineConnector\" width=\"787\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DefineConnector ::=\n    DocComment  'define'  'connector' Ident  'from' ConnectorKind ArgsWithEnd \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-defineflow",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DefineFlow"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/defineflow.svg\" alt=\"DefineFlow\" width=\"809\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DefineFlow ::=\n    DocComment  'define'  'flow' Ident DefinitionArgs  'flow' FlowStmts  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-query",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Query"
          }
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "query-language-entrypoint",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Query"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Language"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Entrypoint"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "This"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "top"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "level"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "trickle"
          ]
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/query.svg\" alt=\"Query\" width=\"555\" height=\"100\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Query ::=\n    ConfigDirectives Stmts  '<end-of-stream>' ?  \n  | Stmts  '<end-of-stream>' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-stmts",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Stmts"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Stmts"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Stmt"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/stmts.svg\" alt=\"Stmts\" width=\"299\" height=\"87\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Stmts ::=\n    Stmt  ';' Stmts \n  | Stmt  ';' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-stmt",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Stmt"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Stmt"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Queries"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "support:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Defining"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "window"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "operator"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "script"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "pipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Creating"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "node"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instances"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "stream"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "pipeline"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "operator"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "script"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Linking"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "nodes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "togther"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "execution"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "graph"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "select"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/stmt.svg\" alt=\"Stmt\" width=\"1237\" height=\"339\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Stmt ::=\n    Use \n  | DefineWindow \n  | DefineOperator \n  | DefineScript \n  | DefinePipeline \n  | CreateOperator \n  | CreateScript \n  | CreatePipeline \n  |  'create'  'stream' Ident \n  |  'select' ComplexExprImut  'from' StreamPort WindowClause WhereClause GroupByClause  'into' StreamPort HavingClause \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-definewindow",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DefineWindow"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DefineWindow"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "temporal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specification."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mechanism"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "caches,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stores"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "buffers"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "finite"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "temporal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "range."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "time"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "range"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "number"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "events,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "wall"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clock"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "other"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "parameters."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instanciated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "support"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "windows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "such"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "select"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/definewindow.svg\" alt=\"DefineWindow\" width=\"991\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DefineWindow ::=\n    DocComment  'define'  'window' Ident  'from' WindowKind CreationWith EmbeddedScriptImut  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-defineoperator",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DefineOperator"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DefineOperator"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "operators"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "written"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "programming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "parameterized"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instanciated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreateOperator"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/defineoperator.svg\" alt=\"DefineOperator\" width=\"771\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DefineOperator ::=\n    DocComment  'define'  'operator' Ident  'from' OperatorKind ArgsWithEnd \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-definescript",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DefineScript"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DefineScript"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "DSL"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rather"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "than"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operators"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "written"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "programming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "parameterized"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instanciated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreateScript"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/definescript.svg\" alt=\"DefineScript\" width=\"717\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DefineScript ::=\n    DocComment  'define'  'script' Ident DefinitionArgs EmbeddedScript \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-definepipeline",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "DefinePipeline"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "DefinePipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "creates"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "langauge"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "DSL"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "instead"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "written"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "programming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "parameterized"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instanciated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreatePipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/definepipeline.svg\" alt=\"DefinePipeline\" width=\"1077\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule DefinePipeline ::=\n    DocComment  'define'  'pipeline' Ident (  'from' Ports ) ?  (  'into' Ports ) ?  DefinitionArgs Pipeline \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-createscript",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CreateScript"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreateScript"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "creates"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "DSL"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rather"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "than"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operators"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "written"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "programming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "causes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instance"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "referenced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "created"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "inserted"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "execution"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "graph."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/createscript.svg\" alt=\"CreateScript\" width=\"733\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CreateScript ::=\n     'create'  'script' Ident CreationWithEnd \n  |  'create'  'script' Ident  'from' ModularTarget CreationWithEnd \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-createoperator",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CreateOperator"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreateOperator"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "creates"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "operators"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "written"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "programming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "causes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instance"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "referenced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "created"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "inserted"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "execution"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "graph."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/createoperator.svg\" alt=\"CreateOperator\" width=\"749\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CreateOperator ::=\n     'create'  'operator' Ident CreationWithEnd \n  |  'create'  'operator' Ident  'from' ModularTarget CreationWithEnd \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-createpipeline",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CreatePipeline"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CreatePipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "creates"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "langauge"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "DSL"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "instead"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "written"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "programming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "causes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "instance"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "referenced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipeline"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "created"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "inserted"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "execution"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "graph."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/createpipeline.svg\" alt=\"CreatePipeline\" width=\"749\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CreatePipeline ::=\n     'create'  'pipeline' Ident CreationWithEnd \n  |  'create'  'pipeline' Ident  'from' ModularTarget CreationWithEnd \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-maybeport",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "MaybePort"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "MaybePort"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Port"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/maybeport.svg\" alt=\"MaybePort\" width=\"237\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule MaybePort ::=\n    (  '/' Ident ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-streamport",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "StreamPort"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "StreamPort"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stream"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Port"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "When"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Port"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "omitted,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "will"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internally"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "default"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Port"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "appropriate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "in"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "out"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "port."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Where"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "err"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "user"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Port"
          ]
        },
        {
          "t": "Str",
          "c": "s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "preferred,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Port"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specification"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "SHOULD"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/streamport.svg\" alt=\"StreamPort\" width=\"237\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule StreamPort ::=\n    Ident MaybePort \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-windowkind",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WindowKind"
          }
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "tumbling",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Tumbling"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "tumbling"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "wall-clock-bound"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data-bound"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "non-overlapping"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "time"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "storing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "windows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "overlap,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "there"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "no"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "gaps"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "between"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "windows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "permissible."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "sliding",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Sliding"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "sliding"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "wall-clock-bound"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data-bound"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "captures"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "intervalic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "whose"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extent"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "derives"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "size"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sliding"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "size"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "2"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "captures"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "up"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Every"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subsequent"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "will"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "evict"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "oldest"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "retain"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "newest"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "previous"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "now"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "oldest"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ")"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "conditioning-1",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Conditioning"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Both"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "kinds"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "store"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arrival"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "order"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/windowkind.svg\" alt=\"WindowKind\" width=\"223\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WindowKind ::=\n     'sliding' \n  |  'tumbling' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-windowclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WindowClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WindowClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supporting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/windowclause.svg\" alt=\"WindowClause\" width=\"223\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WindowClause ::=\n    ( WindowDefn ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-windows",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Windows"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Windows"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/windows.svg\" alt=\"Windows\" width=\"159\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Windows ::=\n    Windows_ \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-windows_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Windows_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Windows_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/windows_.svg\" alt=\"Windows_\" width=\"307\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Windows_ ::=\n    Sep!(Windows_, Window, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-window",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Window"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Window"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modular"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "target"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "window"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/window.svg\" alt=\"Window\" width=\"199\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Window ::=\n    ModularTarget \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-windowdefn",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WindowDefn"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WindowDefn"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "temporal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "basis"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "which"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stream"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "applicable."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/windowdefn.svg\" alt=\"WindowDefn\" width=\"259\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WindowDefn ::=\n     '[' Windows  ']' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-whereclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WhereClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WhereClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "filter"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forward"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "discard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ")"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "where"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "executed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "before"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/whereclause.svg\" alt=\"WhereClause\" width=\"349\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WhereClause ::=\n    (  'where' ComplexExprImut ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-havingclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "HavingClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "HavingClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "filter"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forward"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "discard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ")"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "having"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "executed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "after"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "has"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/havingclause.svg\" alt=\"HavingClause\" width=\"357\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule HavingClause ::=\n    (  'having' ComplexExprImut ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-groupbyclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "GroupByClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "GroupByClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "group"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supporting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "uses"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "group"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "maintains"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "each"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "group"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "captured"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "grouping"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "dimensions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specified"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "this"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/groupbyclause.svg\" alt=\"GroupByClause\" width=\"355\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule GroupByClause ::=\n    (  'group'  'by' GroupDef ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-groupdef",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "GroupDef"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "GroupDef"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "parts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "grouping"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "dimension."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Group"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "segments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "derived"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "which"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "their"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "serialized"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "values"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "which"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "computes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Each"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "which"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "iterates"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compute"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/groupdef.svg\" alt=\"GroupDef\" width=\"393\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule GroupDef ::=\n    ExprImut \n  |  'set'  '(' GroupDefs  ')' \n  |  'each'  '(' ExprImut  ')' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-groupdefs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "GroupDefs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "GroupDefs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "GroupDef"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/groupdefs.svg\" alt=\"GroupDefs\" width=\"175\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule GroupDefs ::=\n    GroupDefs_ \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-groupdefs_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "GroupDefs_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "GroupDefs_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "GroupDef"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/groupdefs_.svg\" alt=\"GroupDefs_\" width=\"339\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule GroupDefs_ ::=\n    Sep!(GroupDefs_, GroupDef, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-embeddedscriptimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "EmbeddedScriptImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "EmbeddedScriptImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "embedded"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "script"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/embeddedscriptimut.svg\" alt=\"EmbeddedScriptImut\" width=\"413\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule EmbeddedScriptImut ::=\n    (  'script' EmbeddedScriptContent ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-embeddedscriptcontent",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "EmbeddedScriptContent"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "EmbeddedScriptContent"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "embedded"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/embeddedscriptcontent.svg\" alt=\"EmbeddedScriptContent\" width=\"159\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule EmbeddedScriptContent ::=\n    ExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-ports",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Ports"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Ports"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stream"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "ports."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/ports.svg\" alt=\"Ports\" width=\"275\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Ports ::=\n    Sep!(Ports, <Ident>, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-operatorkind",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "OperatorKind"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "OperatorKind"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modular"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "like"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "reference"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Operators"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "programmed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "native"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "code"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "referenced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "virtual"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/operatorkind.svg\" alt=\"OperatorKind\" width=\"267\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule OperatorKind ::=\n    Ident  '::' Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-embeddedscript",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "EmbeddedScript"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "EmbeddedScript"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "Script"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "DSL"
              }
            ],
            [
              "/docs/language/Script",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "["
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "Full"
              }
            ],
            [
              "/docs/language/Full#rule-script",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "]."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "enclosed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "script"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ".."
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "end"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "blocks."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/embeddedscript.svg\" alt=\"EmbeddedScript\" width=\"363\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule EmbeddedScript ::=\n     'script' TopLevelExprs  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-pipeline",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Pipeline"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Pipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "pipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ".."
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "end"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MAY"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "begin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConfigDirectives"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/pipeline.svg\" alt=\"Pipeline\" width=\"633\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Pipeline ::=\n     'pipeline' ConfigDirectives ?  PipelineCreateInner  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-pipelinecreateinner",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PipelineCreateInner"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PipelineCreateInner"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Pipeline"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "many"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Stmt"
          ]
        },
        {
          "t": "Str",
          "c": "s."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/pipelinecreateinner.svg\" alt=\"PipelineCreateInner\" width=\"299\" height=\"87\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PipelineCreateInner ::=\n    Stmt  ';' Stmts \n  | Stmt  ';' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-script",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Script"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Script"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "entry"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "point"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Tremor’s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "oriented"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "langauge"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "embedded"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "queries"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "script"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "specify"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "configuration"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connectors,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pipelines,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "flows,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operators"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "top"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "level"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "There"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "must"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "least"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "end"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stream"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "token"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/script.svg\" alt=\"Script\" width=\"523\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Script ::=\n    ModComment TopLevelExprs  '<end-of-stream>' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "type-system",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Type"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "system"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "oriented"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "type"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "system"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "backwards"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compatible"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Any"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "well-formed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "document"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "null"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "boolean"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "string"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "utf-8"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "),"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "integer"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "64-bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unsigned"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "),"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "float"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "64-bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "ieee"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "),"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arrays,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "records"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "equivalent"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "their"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "counterparts."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "transporting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "opaque"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "asymmetric",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Asymmetric"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MAY"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "NOT"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "always"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal."
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "# The following literal is valid JSON and valid Tremor\n[1, \"snot\", {}];\n\n# The following literal is valid in tremor only\n[1, \"snot\", {}, << data/binary >>, ];"
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "does"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "trailing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "commas"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arrays"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "records,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "does"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "does"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Note:"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "By"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "default,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "most"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "connectors"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "serialize"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "json"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "codec."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "type"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "system"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "however"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "agnostic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "wire"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "format"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "flows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "through"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "tremor."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "So"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "originate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "json"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "msgpack"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "computations",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Computations"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rich"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "same"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "support"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "additive,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutliplicate,"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "comparitive,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "languages"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "like"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "rust"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "java"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "As"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "most"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "flows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "through"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "heirarchically"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structured"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON-like"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "has"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rich"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "primitives"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehension"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "iterating"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structures."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "loops",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Loops"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "does"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "support"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "while"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "loop"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "other"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "primitives"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "loop,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "recurse"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "iterate"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "indefinitely."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "In"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "system,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "streaming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "continuously"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "so"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "infinite"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "loops"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "streams"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "making"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forward"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "progress"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "considered"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "harmful."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "There"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "no"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "loops."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "We"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "do"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "support"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "iteration"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "finite"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arrays."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "We"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "do"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "support"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "depth-limited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tail"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "recursive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "programming."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "expression-oriented",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Expression"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "oriented"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "oriented."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "This"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "say"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "every"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "form"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supported"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "returns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structure"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "result."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "event-oriented",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Event"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "oriented"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Scripts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "emit"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "drop"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "`event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processed."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "event"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "keyword"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subject."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "It"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "currently"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processed."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "emit"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "keyword"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "halts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "succesfully"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "drop"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "keyword"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "halts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "discarding"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "current"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "illustrative-example",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Illustrative"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "example"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "# Propagate events marked as important and convert them to system alerts\nmatch event of\n  case %{ present important } => { \"alert\": event.message }\n  default => drop\nend;"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-toplevelexprs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TopLevelExprs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TopLevelExprs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "top"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "level"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "terminating"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/toplevelexprs.svg\" alt=\"TopLevelExprs\" width=\"427\" height=\"87\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule TopLevelExprs ::=\n    TopLevelExpr  ';' TopLevelExprs \n  | TopLevelExpr  ';' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-innerexprs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "InnerExprs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "InnerExprs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "permissible"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "within"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "another"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "containing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scope."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Like"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TopLevelExprs"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "inner"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colons."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "last"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "At"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "least"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MUST"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/innerexprs.svg\" alt=\"InnerExprs\" width=\"339\" height=\"87\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule InnerExprs ::=\n    Expr  ';' InnerExprs \n  | Expr  ';' ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-toplevelexpr",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TopLevelExpr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TopLevelExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "outer"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "most"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scope"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "script"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Use"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "declarations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allow"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "external"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "referenced."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Constant"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compile"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "time"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "constants."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "user"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Intrinsic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "funtions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/toplevelexpr.svg\" alt=\"TopLevelExpr\" width=\"215\" height=\"174\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule TopLevelExpr ::=\n    Const \n  | FnDefn \n  | Intrinsic \n  | Expr \n  | Use \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example-2",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "In"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "standard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "library"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "many"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "top"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "level"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "use"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "importing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sub"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path."
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "use std::array;     # Import the std array utilities\nuse std::base64     # Import the std base64 utilities;\nuse std::binary;    # ...\nuse std::float;\nuse std::integer;\nuse std::json;"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-const",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Const"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Const"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binds"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifier."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "As"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "cannot"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "changed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/const.svg\" alt=\"Const\" width=\"535\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Const ::=\n    DocComment  'const' Ident  '=' ComplexExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example-3",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "use std::base64;\nconst snot = \"snot\";\nconst badger = \"badger\";\nconst snot_badger = { \"#{snot}\": \"#{base64::encode(badger)}\" };"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-expr",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Expr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Expr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "aliases"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "SimpleExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "alias"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "higher"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "levels"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "DSL"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "such"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "deployment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "query"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "avoid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "some"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internal"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "complexity"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Within"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scripting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "DSLs"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "grammar"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "different"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "variations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "significant."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Hoewver,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "higher"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "level"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "we"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "limit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exposure"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subset"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "This"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "done"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "convenience,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "consistency"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "usage,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "ease"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "learning"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/expr.svg\" alt=\"Expr\" width=\"175\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Expr ::=\n    SimpleExpr \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-simpleexpr",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "SimpleExpr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "SimpleExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "all"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/simpleexpr.svg\" alt=\"SimpleExpr\" width=\"207\" height=\"207\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule SimpleExpr ::=\n    Match \n  | For \n  | Let \n  | Drop \n  | Emit \n  | ExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-alwaysimutexpr",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "AlwaysImutExpr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "AlwaysImutExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "reduced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compile"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "time"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "folded"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/alwaysimutexpr.svg\" alt=\"AlwaysImutExpr\" width=\"247\" height=\"339\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule AlwaysImutExpr ::=\n    Patch \n  | Merge \n  | Invoke \n  | Literal \n  | Path \n  | Record \n  | List \n  | StringLiteral \n  | BytesLiteral \n  | Recur \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-recur",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Recur"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Recur"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "stack-depth-limited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tail-recursion"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/recur.svg\" alt=\"Recur\" width=\"417\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Recur ::=\n     'recur'  '('  ')' \n  |  'recur'  '(' InvokeArgs  ')' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-exprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "root"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/exprimut.svg\" alt=\"ExprImut\" width=\"175\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ExprImut ::=\n    OrExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-orexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "OrExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "OrExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exclusive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/orexprimut.svg\" alt=\"OrExprImut\" width=\"411\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule OrExprImut ::=\n    BinOp!(BinOr, ExprImut, XorExprImut) \n  | XorExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-xorexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "XorExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "XorExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exclusive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exclusive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/xorexprimut.svg\" alt=\"XorExprImut\" width=\"443\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule XorExprImut ::=\n    BinOp!(BinXor, XorExprImut, AndExprImut) \n  | AndExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-andexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "AndExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "AndExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "logical"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/andexprimut.svg\" alt=\"AndExprImut\" width=\"459\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule AndExprImut ::=\n    BinOp!(BinAnd, AndExprImut, BitOrExprImut) \n  | BitOrExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bitorexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BitOrExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BitOrExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exclusive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bitorexprimut.svg\" alt=\"BitOrExprImut\" width=\"207\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BitOrExprImut ::=\n    BitXorExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bitxorexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BitXorExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BitXorExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exclusive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exclusive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bitxorexprimut.svg\" alt=\"BitXorExprImut\" width=\"515\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BitXorExprImut ::=\n    BinOp!(BinBitXor, BitXorExprImut, BitAndExprImut) \n  | BitAndExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bitandexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BitAndExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BitAndExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "equality"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bitandexprimut.svg\" alt=\"BitAndExprImut\" width=\"483\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BitAndExprImut ::=\n    BinOp!(BinBitAnd, BitAndExprImut, EqExprImut) \n  | EqExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-eqexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "EqExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "EqExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "equality"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "equality"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comparitive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/eqexprimut.svg\" alt=\"EqExprImut\" width=\"427\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule EqExprImut ::=\n    BinOp!(BinEq, EqExprImut, CmpExprImut) \n  | CmpExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-cmpexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CmpExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CmpExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comparative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comparative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "shift"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/cmpexprimut.svg\" alt=\"CmpExprImut\" width=\"483\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CmpExprImut ::=\n    BinOp!(BinCmp, CmpExprImut, BitShiftExprImut) \n  | BitShiftExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bitshiftexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BitShiftExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BitShiftExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "shift"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "shift"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "additive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bitshiftexprimut.svg\" alt=\"BitShiftExprImut\" width=\"523\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BitShiftExprImut ::=\n    BinOp!(BinBitShift, BitShiftExprImut, AddExprImut) \n  | AddExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-addexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "AddExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "AddExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "additive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "additive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "multiplicative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/addexprimut.svg\" alt=\"AddExprImut\" width=\"443\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule AddExprImut ::=\n    BinOp!(BinAdd, AddExprImut, MulExprImut) \n  | MulExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-mulexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "MulExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "MulExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "multiplicative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "multiplicative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/mulexprimut.svg\" alt=\"MulExprImut\" width=\"459\" height=\"119\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule MulExprImut ::=\n    BinOp!(BinMul, MulExprImut, UnaryExprImut) \n  | UnaryExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-unaryexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "UnaryExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "UnaryExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "marked"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "+"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "positive,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "-"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "negative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "explicitly"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "when"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "needed."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Otherwise,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "reduces"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "has"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "lower"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/unaryexprimut.svg\" alt=\"UnaryExprImut\" width=\"301\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule UnaryExprImut ::=\n     '+' UnaryExprImut \n  |  '-' UnaryExprImut \n  | UnarySimpleExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-unarysimpleexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "UnarySimpleExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "UnarySimpleExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "unary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "marked"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "explicitly"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "not"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "!"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "negate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "target"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "presence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Otherwise,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "reduces"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "presence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "presence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "has"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "lower"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/unarysimpleexprimut.svg\" alt=\"UnarySimpleExprImut\" width=\"365\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule UnarySimpleExprImut ::=\n     'not' UnarySimpleExprImut \n  |  '!' UnarySimpleExprImut \n  | PresenceSimplExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-presencesimplexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PresenceSimplExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PresenceSimplExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "presence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tests"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "present"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "absent"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "test"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "expressions,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Otherwise,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "reduces"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "has"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "lower"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/presencesimplexprimut.svg\" alt=\"PresenceSimplExprImut\" width=\"277\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PresenceSimplExprImut ::=\n     'present' Path \n  |  'absent' Path \n  | SimpleExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-complexexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ComplexExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ComplexExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "complex"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/complexexprimut.svg\" alt=\"ComplexExprImut\" width=\"215\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ComplexExprImut ::=\n    MatchImut \n  | ForImut \n  | ExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-intrinsic",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Intrinsic"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "intrinsic"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "intrinsic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "signatures."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "This"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "maintainers"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "document"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "implemented"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "native"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rust"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "code."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "facility"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "document"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "generation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tools"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "document"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "intrinsic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "same"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "way"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "user"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "In"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "short,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "thought"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provided."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "For"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "information"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "how"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "define"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "user"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "see"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "function"
              }
            ],
            [
              "#rule-fndecl",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/intrinsic.svg\" alt=\"Intrinsic\" width=\"1071\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Intrinsic ::=\n    DocComment  'intrinsic'  'fn' Ident  '('  ')'  'as' ModularTarget \n  | DocComment  'intrinsic'  'fn' Ident  '(' FnArgs  ')'  'as' ModularTarget \n  | DocComment  'intrinsic'  'fn' Ident  '(' FnArgs  ','  '.'  '.'  '.'  ')'  'as' ModularTarget \n  | DocComment  'intrinsic'  'fn' Ident  '('  '.'  '.'  '.'  ')'  'as' ModularTarget \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example-4",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "From"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "our"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "standard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "library"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "generated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "documentation,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "we"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "see"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "base64"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "encode"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "intrinsic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function."
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "## Encodes a `binary` as a base64 encoded string\n##\n## Returns a `string`\nintrinsic fn encode(input) as base64::encode;"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fndefn",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FnDefn"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fndefn.svg\" alt=\"FnDefn\" width=\"1015\" height=\"207\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FnDefn ::=\n    DocComment  'fn' Ident  '('  '.'  '.'  '.'  ')'  'with' InnerExprs  'end' \n  | DocComment  'fn' Ident  '(' FnArgs  ','  '.'  '.'  '.'  ')'  'with' InnerExprs  'end' \n  | DocComment  'fn' Ident  '('  ')'  'with' InnerExprs  'end' \n  | DocComment  'fn' Ident  '(' FnArgs  ')'  'with' InnerExprs  'end' \n  | DocComment  'fn' Ident  '('  ')'  'of' FnCases  'end' \n  | DocComment  'fn' Ident  '(' FnArgs  ')'  'of' FnCases  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fncases",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FnCases"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FnCases"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "cases"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fncases.svg\" alt=\"FnCases\" width=\"381\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FnCases ::=\n    FnCaseClauses FnCaseDefault \n  | FnCaseDefault \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fncasedefault",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FnCaseDefault"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FnCaseDefines"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "default"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "use"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "signatures"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fncasedefault.svg\" alt=\"FnCaseDefault\" width=\"269\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FnCaseDefault ::=\n     'default' Effectors \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fncase",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FnCase"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FnCase"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supporting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "use"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "signatures"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fncase.svg\" alt=\"FnCase\" width=\"677\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FnCase ::=\n     'case'  '(' ArrayPredicatePatterns  ')' WhenClause Effectors \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fncaseclauses",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FnCaseClauses"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FnCaseClauses"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "case"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structurally"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matched"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "signatures"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fncaseclauses.svg\" alt=\"FnCaseClauses\" width=\"325\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FnCaseClauses ::=\n    FnCase \n  | FnCaseClauses FnCase \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fnargs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FnArgs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FnArgs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arguments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fnargs.svg\" alt=\"FnArgs\" width=\"315\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FnArgs ::=\n    Ident \n  | FnArgs  ',' Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-simpleexprimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "SimpleExprImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "SimpleExprImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optionally"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "parenthesized"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/simpleexprimut.svg\" alt=\"SimpleExprImut\" width=\"371\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule SimpleExprImut ::=\n     '(' ComplexExprImut  ')' \n  | AlwaysImutExpr \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-literal",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Literal"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Literal"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "primitive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supported"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/literal.svg\" alt=\"Literal\" width=\"183\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Literal ::=\n    Nil \n  | Bool \n  | Int \n  | Float \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-nil",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Nil"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/nil.svg\" alt=\"Nil\" width=\"135\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Nil ::=\n     'nil' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example-5",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "null # The `null` literal value"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bool",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Bool"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Bool"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "boolean"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bool.svg\" alt=\"Bool\" width=\"143\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Bool ::=\n     'bool' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example-6",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "true # The boolean `true` literal"
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "false # The boolean `false` literal"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-int",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Int"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Int"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "integer"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/int.svg\" alt=\"Int\" width=\"135\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Int ::=\n     'int' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-float",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Float"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Float"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "IEEE"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "float"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/float.svg\" alt=\"Float\" width=\"151\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Float ::=\n     'float' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-stringliteral",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "StringLiteral"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "StringLiteral"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Strings"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "\""
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "single-quote"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "\"\"\""
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "triple-quote"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "blocks"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "UTF-8"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "text."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "single-quote"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "single"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "line"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supporting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "interpolation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "triple-quote"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "multi-line"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supporting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "interpolation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/stringliteral.svg\" alt=\"StringLiteral\" width=\"539\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule StringLiteral ::=\n     'heredoc_start' StrLitElements  'heredoc_end' \n  |  '\\\\' StrLitElements  '\\\\' \n  |  '\\\\'  '\\\\' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-strlitelements",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "StrLitElements"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "StrLitElements"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structure"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "String"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "support"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "interpolation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "#{"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "}"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "escape"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "sequence."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Content"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "within"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "escape"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "any"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/strlitelements.svg\" alt=\"StrLitElements\" width=\"465\" height=\"207\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule StrLitElements ::=\n    StringPart StrLitElements \n  |  '\\\\\\\\#' StrLitElements \n  |  '#{' ExprImut  '}' StrLitElements \n  | StringPart \n  |  '\\\\\\\\#' \n  |  '#{' ExprImut  '}' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-stringpart",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "StringPart"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "StringPart"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "simple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "heredoc"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "style"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/stringpart.svg\" alt=\"StringPart\" width=\"215\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule StringPart ::=\n     'string' \n  |  'heredoc' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-list",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "List"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "List"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "["
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "]"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "square"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bracket"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "zero"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "many"
        },
        {
          "t": "Space"
        },
        {
          "t": "Quoted",
          "c": [
            {
              "t": "SingleQuote"
            },
            [
              {
                "t": "Str",
                "c": ","
              }
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/list.svg\" alt=\"List\" width=\"347\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule List ::=\n     '[' ListElements  ']' \n  |  '['  ']' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-listelements",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ListElements"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ListElements"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "elements."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/listelements.svg\" alt=\"ListElements\" width=\"199\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ListElements ::=\n    ListElements_ \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-listelements_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ListElements_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ListElements_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ListElements"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "elements"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "using"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Sep"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/listelements_.svg\" alt=\"ListElements_\" width=\"419\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ListElements_ ::=\n    Sep!(ListElements_, ComplexExprImut, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-record",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Record"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Record"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name-value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pairs"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Records"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "enclosed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "{"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "}"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "curly"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "braces."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structure"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "backwards"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compatible"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "All"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "records"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "read"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "all"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "records"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "read"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "JSON"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "reader"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supports"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "computations,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "trailiing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ","
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "commas"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "its"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structures."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/record.svg\" alt=\"Record\" width=\"299\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Record ::=\n     '{' Fields  '}' \n  |  '{'  '}' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-field",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Field"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Field"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ":"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pair"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/field.svg\" alt=\"Field\" width=\"403\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Field ::=\n    StringLiteral  ':' ComplexExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-path",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Path"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "over"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structures"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tersely"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "indexed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "like"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structure."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supported"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subset"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ")"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Meta"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "keywords"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "like"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "$"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "args"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "state"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "event"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "group"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "window"
          ]
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/path.svg\" alt=\"Path\" width=\"215\" height=\"273\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Path ::=\n    MetaPath \n  | EventPath \n  | StatePath \n  | LocalPath \n  | ConstPath \n  | AggrPath \n  | ArgsPath \n  | ExprPath \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-exprpathroot",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ExprPathRoot"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ExprPathRoot"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subset"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "where"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supported."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "These"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "records."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arrays."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "result"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "invocations."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "result"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Parenthetic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/exprpathroot.svg\" alt=\"ExprPathRoot\" width=\"371\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ExprPathRoot ::=\n     '(' ComplexExprImut  ')' \n  | Invoke \n  | Record \n  | List \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-exprpath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ExprPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ExprPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/exprpath.svg\" alt=\"ExprPath\" width=\"317\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ExprPath ::=\n    ExprPathRoot PathSegments \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-metapath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "MetaPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "MetaPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "metadata"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "In"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "context"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "streaming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "metadata"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "generated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "accessed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "It"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "possible"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "write"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "metadata"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "hint"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "perform"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "certain"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forwarded."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operators"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "connectors"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "read"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "write"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "metadata."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/metapath.svg\" alt=\"MetaPath\" width=\"363\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule MetaPath ::=\n     '$' Ident PathSegments \n  |  '$' Ident \n  |  '$' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-aggrpath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "AggrPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "AggrPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "group"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "window"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "In"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "context"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "windowed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "enables"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "group"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "window"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "meta"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "keywords"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "partipcate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/aggrpath.svg\" alt=\"AggrPath\" width=\"333\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule AggrPath ::=\n     'group' PathSegments \n  |  'group' \n  |  'window' PathSegments \n  |  'window' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-argspath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArgsPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArgsPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "args"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/argspath.svg\" alt=\"ArgsPath\" width=\"317\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArgsPath ::=\n     'args' PathSegments \n  |  'args' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-localpath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "LocalPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "LocalPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "enables"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "locally"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scoped"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifiers."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/localpath.svg\" alt=\"LocalPath\" width=\"309\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule LocalPath ::=\n    Ident PathSegments \n  | Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-constpath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ConstPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ConstPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "enables"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "module"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scoped"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/constpath.svg\" alt=\"ConstPath\" width=\"315\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ConstPath ::=\n    ModPath  '::' LocalPath \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-statepath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "StatePath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "StatePath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "user"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "memory"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "state"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "state"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "dereferenced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/statepath.svg\" alt=\"StatePath\" width=\"325\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule StatePath ::=\n     'state' PathSegments \n  |  'state' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-eventpath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "EventPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "EventPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "streaming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "current"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "streaming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "event"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "dereferenced"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/eventpath.svg\" alt=\"EventPath\" width=\"325\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule EventPath ::=\n     'event' PathSegments \n  |  'event' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-pathsegments",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PathSegments"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PathSegments"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "continuation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidth",
              "c": 0.5
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidth",
              "c": 0.5
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Form"
                        },
                        {
                          "t": "Space"
                        },
                        {
                          "t": "Str",
                          "c": "Variation"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              ".<Ident>"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "A"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "terminal"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "segment"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "dereferencing"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "a"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "record"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "field"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "<Ident><PathSegments>"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "A"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "non-terminal"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "segment"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "dereferencing"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "a"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "record"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "field"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "[<Selector>]"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "A"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "range"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "index"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "segment"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "dereferencing"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "an"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "array"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "[<Selector>]"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "A"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "terminal"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "range"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "index"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "segment"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "dereferencing"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "an"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "array"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "[<Selector>]<PathSegments>"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "A"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "non-terminal"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "range"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "index"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "segment"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "dereferencing"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "an"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "array"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/pathsegments.svg\" alt=\"PathSegments\" width=\"441\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PathSegments ::=\n     '.' Ident PathSegments \n  |  '[' Selector  ']' PathSegments \n  |  '[' Selector  ']' \n  |  '.' Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-selector",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Selector"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Selector"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "index"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "range"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "range"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ":"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pair"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "index"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "single"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/selector.svg\" alt=\"Selector\" width=\"467\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Selector ::=\n    ComplexExprImut  ':' ComplexExprImut \n  | ComplexExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-invoke",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Invoke"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Invoke"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "invocation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/invoke.svg\" alt=\"Invoke\" width=\"457\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Invoke ::=\n    FunctionName  '(' InvokeArgs  ')' \n  | FunctionName  '('  ')' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-functionname",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "FunctionName"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "FunctionName"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "function"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "It"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Ident"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "local"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scope."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "It"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "functions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modular"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "scope."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/functionname.svg\" alt=\"FunctionName\" width=\"331\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule FunctionName ::=\n    Ident \n  | ModPath  '::' Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-modpath",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ModPath"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ModPath"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modular"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "modular"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "path"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Ident"
          ]
        },
        {
          "t": "Str",
          "c": "s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "::"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "double-colon."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/modpath.svg\" alt=\"ModPath\" width=\"331\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ModPath ::=\n    ModPath  '::' Ident \n  | Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-invokeargs",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "InvokeArgs"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "InvokeArgs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/invokeargs.svg\" alt=\"InvokeArgs\" width=\"183\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule InvokeArgs ::=\n    InvokeArgs_ \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-invokeargs_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "InvokeArgs_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "InvokeArgs_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "internal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "InvokeArgs"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ";"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/invokeargs_.svg\" alt=\"InvokeArgs_\" width=\"403\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule InvokeArgs_ ::=\n    Sep!(InvokeArgs_, ComplexExprImut, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-drop",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Drop"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Drop"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "halts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "current"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "returning"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "control"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "dropping"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "constraints-1",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Constraints"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "drop"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "should"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "care"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in-flight"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "discarded"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Where"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "circuit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "breakers,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "guaranteed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delivery"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "quality"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "service"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "managed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "engine"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "downstream"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "these"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "should"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "carefully"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "programmed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "so"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "drop"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "have"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "no"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "side-effects"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "non-functional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "behaviours"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Here"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "dragons!"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/drop.svg\" alt=\"Drop\" width=\"143\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Drop ::=\n     'drop' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-emit",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Emit"
          }
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "section",
          [],
          []
        ],
        []
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Emit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "halts"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processing"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "current"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "processed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "returning"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "control"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "emitting"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "synthetic"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "event"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "output."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "By"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "default,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "emit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "will"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "emit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "events"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "standard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "output"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "port"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "out"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "redirected"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "alternate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "output"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "port."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/emit.svg\" alt=\"Emit\" width=\"537\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Emit ::=\n     'emit' ComplexExprImut  '=>' StringLiteral \n  |  'emit' ComplexExprImut \n  |  'emit'  '=>' StringLiteral \n  |  'emit' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-let",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Let"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Let"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bound"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subject"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "assignment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor’s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bound"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutable."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/let.svg\" alt=\"Let\" width=\"245\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Let ::=\n     'let' Assignment \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-assignment",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Assignment"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Assignment"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bound"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "references"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subject"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "assignment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor’s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Path"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/assignment.svg\" alt=\"Assignment\" width=\"291\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Assignment ::=\n    Path  '=' SimpleExpr \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-patch",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Patch"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Patch"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "patch"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/patch.svg\" alt=\"Patch\" width=\"583\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Patch ::=\n     'patch' ComplexExprImut  'of' PatchOperations  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-patchoperations",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PatchOperations"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PatchOperations"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patch"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/patchoperations.svg\" alt=\"PatchOperations\" width=\"515\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PatchOperations ::=\n    PatchOperationClause \n  | PatchOperations  ';' PatchOperationClause \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-patchfield",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PatchField"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PatchField"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifying"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "field"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "which"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PatchOperationClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "applied."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/patchfield.svg\" alt=\"PatchField\" width=\"199\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PatchField ::=\n    StringLiteral \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-patchoperationclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PatchOperationClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PatchOperationClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "patch"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patch"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Insert,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "update,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "copy"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clone"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "),"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "move"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rename"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "),"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "merge"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "erase"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "fields"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Apply"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "default"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "field"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "whole"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "input"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/patchoperationclause.svg\" alt=\"PatchOperationClause\" width=\"537\" height=\"339\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PatchOperationClause ::=\n     'insert' PatchField  '=>' ComplexExprImut \n  |  'upsert' PatchField  '=>' ComplexExprImut \n  |  'update' PatchField  '=>' ComplexExprImut \n  |  'erase' PatchField \n  |  'move' PatchField  '=>' PatchField \n  |  'copy' PatchField  '=>' PatchField \n  |  'merge' PatchField  '=>' ComplexExprImut \n  |  'merge'  '=>' ComplexExprImut \n  |  'default' PatchField  '=>' ComplexExprImut \n  |  'default'  '=>' ComplexExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-merge",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Merge"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Merge"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "merge"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "two"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "complex"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/merge.svg\" alt=\"Merge\" width=\"583\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Merge ::=\n     'merge' ComplexExprImut  'of' ComplexExprImut  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-for",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "For"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "For"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "for"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehension."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/for.svg\" alt=\"For\" width=\"559\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule For ::=\n     'for' ComplexExprImut  'of' ForCaseClauses  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-forcaseclauses",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ForCaseClauses"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ForCaseClausest"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "case"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clauses"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "for"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehension."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/forcaseclauses.svg\" alt=\"ForCaseClauses\" width=\"389\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ForCaseClauses ::=\n    ForCaseClause \n  | ForCaseClauses ForCaseClause \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-forcaseclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ForCaseClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ForCaseClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "case"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "for"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehensions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/forcaseclause.svg\" alt=\"ForCaseClause\" width=\"657\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ForCaseClause ::=\n     'case'  '(' Ident  ',' Ident  ')' WhenClause Effectors \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-forimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ForImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ForImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "for"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehension."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/forimut.svg\" alt=\"ForImut\" width=\"591\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ForImut ::=\n     'for' ComplexExprImut  'of' ForCaseClausesImut  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-forcaseclausesimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ForCaseClausesImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ForCaseClausesImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "case"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clauses"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "for"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehension."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/forcaseclausesimut.svg\" alt=\"ForCaseClausesImut\" width=\"453\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ForCaseClausesImut ::=\n    ForCaseClauseImut \n  | ForCaseClausesImut ForCaseClauseImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-forcaseclauseimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ForCaseClauseImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ForCaseClauseImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "case"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "for"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehensions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/forcaseclauseimut.svg\" alt=\"ForCaseClauseImut\" width=\"689\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ForCaseClauseImut ::=\n     'case'  '(' Ident  ',' Ident  ')' WhenClause EffectorsImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "record-comprehension",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Record"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Comprehension"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "for { \"snot\": \"badger\" } of\n  case (name, value) => value\nend;"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "array-comprehension",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Array"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Comprehension"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "for [1, \"foo\", 2, \"bar\"] of\n  case (index, value) => value\nend;"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-match",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Match"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Match"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/match.svg\" alt=\"Match\" width=\"543\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Match ::=\n     'match' ComplexExprImut  'of' Predicates  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-predicates",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Predicates"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Predicates"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PredicateClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/predicates.svg\" alt=\"Predicates\" width=\"373\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Predicates ::=\n    PredicateClause \n  | Predicates PredicateClause \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-predicateclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PredicateClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PredicateClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/predicateclause.svg\" alt=\"PredicateClause\" width=\"521\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PredicateClause ::=\n     'case' CasePattern WhenClause Effectors \n  |  'default' Effectors \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-effectors",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Effectors"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Effectors"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "effect"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/effectors.svg\" alt=\"Effectors\" width=\"197\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Effectors ::=\n     '=>' Block \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-block",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Block"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Block"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semi-colon"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Expr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/block.svg\" alt=\"Block\" width=\"299\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Block ::=\n    Expr \n  | Block  ';' Expr \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-matchimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "MatchImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "MatchImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "match"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/matchimut.svg\" alt=\"MatchImut\" width=\"575\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule MatchImut ::=\n     'match' ComplexExprImut  'of' PredicatesImut  'end' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-predicatesimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PredicatesImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PredicatesImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PredicateClauseImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/predicatesimut.svg\" alt=\"PredicatesImut\" width=\"437\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PredicatesImut ::=\n    PredicateClauseImut \n  | PredicatesImut PredicateClauseImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-casepattern",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "CasePattern"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "CasePattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "available"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement’s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "case"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clause."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/casepattern.svg\" alt=\"CasePattern\" width=\"355\" height=\"240\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule CasePattern ::=\n    RecordPattern \n  | ArrayPattern \n  | TuplePattern \n  | ComplexExprImut \n  |  '_' \n  |  '~' TestExpr \n  | Ident  '=' CasePattern \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-predicateclauseimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PredicateClauseImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PredicateClauseImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "valid"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clauses"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statement."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Two"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "forms"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "supported:"
        }
      ]
    },
    {
      "t": "BulletList",
      "c": [
        [
          {
            "t": "Plain",
            "c": [
              {
                "t": "Str",
                "c": "A"
              },
              {
                "t": "Space"
              },
              {
                "t": "Code",
                "c": [
                  [
                    "",
                    [],
                    []
                  ],
                  "case"
                ]
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "expression"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "with"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "optional"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "guard"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "expression"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "and"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "mandatory"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "effector"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "block."
              }
            ]
          }
        ],
        [
          {
            "t": "Plain",
            "c": [
              {
                "t": "Str",
                "c": "A"
              },
              {
                "t": "Space"
              },
              {
                "t": "Code",
                "c": [
                  [
                    "",
                    [],
                    []
                  ],
                  "default"
                ]
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "case"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "expression"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "with"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "effector"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "block."
              }
            ]
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/predicateclauseimut.svg\" alt=\"PredicateClauseImut\" width=\"553\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PredicateClauseImut ::=\n     'case' CasePattern WhenClause EffectorsImut \n  |  'default' EffectorsImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-effectorsimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "EffectorsImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "EffectorsImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "result"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "effectors"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "provides"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "result"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "case"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "default"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "clauses"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "statements,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comprehensions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/effectorsimut.svg\" alt=\"EffectorsImut\" width=\"229\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule EffectorsImut ::=\n     '=>' BlockImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-blockimut",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BlockImut"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BlockImut"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "complex"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "immutable"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/blockimut.svg\" alt=\"BlockImut\" width=\"419\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BlockImut ::=\n    ComplexExprImut \n  | BlockImut  ',' ComplexExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-whenclause",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "WhenClause"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "WhenClause"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "guard"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/whenclause.svg\" alt=\"WhenClause\" width=\"341\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule WhenClause ::=\n    (  'when' ComplexExprImut ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-predicatefieldpattern",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PredicateFieldPattern"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PredicateFieldPattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tests"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "available"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "within"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "use:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Extractor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "test"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "fields."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Record,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tuple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "fields."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Equality"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comparison"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "fields."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Presence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "fields."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/predicatefieldpattern.svg\" alt=\"PredicateFieldPattern\" width=\"463\" height=\"273\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PredicateFieldPattern ::=\n    Ident  '~=' TestExpr \n  | Ident  '=' Ident  '~=' TestExpr \n  | Ident  '~=' RecordPattern \n  | Ident  '~=' ArrayPattern \n  | Ident  '~=' TuplePattern \n  |  'present' Ident \n  |  'absent' Ident \n  | Ident BinCmpEq ComplexExprImut \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-testexpr",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TestExpr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TestExpr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extractor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "microformat"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "body."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "test"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "has"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "component."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Ident"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "expected"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "microformat"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tested"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "match"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "should"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "conform"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "If"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "this"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "validates,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "then"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "microformat"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "specific"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extractor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "named"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Ident"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "employed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extract"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "content"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "into"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "process."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/testexpr.svg\" alt=\"TestExpr\" width=\"253\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule TestExpr ::=\n    Ident TestLiteral \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-recordpattern",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "RecordPattern"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "RecordPattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "values."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "start"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "%{"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "end"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Quoted",
          "c": [
            {
              "t": "SingleQuote"
            },
            [
              {
                "t": "Str",
                "c": "}"
              }
            ]
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "empty"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "%{}"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "fields."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Record"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "search"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "oriented"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Ordinal,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "order"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "position"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "records"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/recordpattern.svg\" alt=\"RecordPattern\" width=\"363\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule RecordPattern ::=\n     '%{' PatternFields  '}' \n  |  '%{'  '}' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-arraypattern",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArrayPattern"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArrayPattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "values."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "start"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "%["
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "end"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "]"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "empty"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "%[]"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "search"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "oriented"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Where"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "ordinal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "needed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "then"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TuplePattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "preferential."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/arraypattern.svg\" alt=\"ArrayPattern\" width=\"443\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArrayPattern ::=\n     '%[' ArrayPredicatePatterns  ']' \n  |  '%['  ']' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-tuplepattern",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TuplePattern"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TuplePattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tuple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "values."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tuple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "start"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "%("
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operator"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "end"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            ")"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "empty"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "%()"
          ]
        },
        {
          "t": "Str",
          "c": ","
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "%(...)"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "any,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tuple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "followed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "open"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tuple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "..."
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "match."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tuple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "ordinal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arrays."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Where"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "search"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "like"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "filters"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "preferential"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArrayPattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "better"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "choice."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/tuplepattern.svg\" alt=\"TuplePattern\" width=\"545\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule TuplePattern ::=\n     '%(' TuplePredicatePatterns OpenTuple  ')' \n  |  '%('  ')' \n  |  '%('  '.'  '.'  '.'  ')' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-opentuple",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "OpenTuple"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "OpenTuple"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tuple"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matches"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "any"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "element"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tuple"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "from"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "position"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "it"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subseuent"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "elements."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "It"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "only"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "final"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TuplePattern"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/opentuple.svg\" alt=\"OpenTuple\" width=\"329\" height=\"55\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule OpenTuple ::=\n    (  ','  '.'  '.'  '.' ) ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-tuplepredicatepatterns",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TuplePredicatePatterns"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TuplePredicatePatterns"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TuplePredicatePattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/tuplepredicatepatterns.svg\" alt=\"TuplePredicatePatterns\" width=\"587\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule TuplePredicatePatterns ::=\n    TuplePredicatePatterns  ',' TuplePredicatePattern \n  | TuplePredicatePattern \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-tuplepredicatepattern",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TuplePredicatePattern"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TuplePredicatePattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "same"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArrayPredicatePattern"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/tuplepredicatepattern.svg\" alt=\"TuplePredicatePattern\" width=\"271\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule TuplePredicatePattern ::=\n    ArrayPredicatePattern \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-arraypredicatepattern",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArrayPredicatePattern"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArrayPredicatePattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "predicate"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "structural"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "pattern"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "matching"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "against"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "array"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "values."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/arraypredicatepattern.svg\" alt=\"ArrayPredicatePattern\" width=\"263\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArrayPredicatePattern ::=\n     '~' TestExpr \n  |  '_' \n  | ComplexExprImut \n  | RecordPattern \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-arraypredicatepatterns",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "ArrayPredicatePatterns"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArrayPredicatePatterns"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ArrayPredicatePattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/arraypredicatepatterns.svg\" alt=\"ArrayPredicatePatterns\" width=\"587\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule ArrayPredicatePatterns ::=\n    ArrayPredicatePatterns  ',' ArrayPredicatePattern \n  | ArrayPredicatePattern \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-patternfields",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PatternFields"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PatternFields"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PredicateFieldPattern"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/patternfields.svg\" alt=\"PatternFields\" width=\"207\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PatternFields ::=\n    PatternFields_ \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-patternfields_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "PatternFields_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PatternFields_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "PatternField"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "follows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semantics"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Sep"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/patternfields_.svg\" alt=\"PatternFields_\" width=\"483\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule PatternFields_ ::=\n    Sep!(PatternFields_, PredicateFieldPattern, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fields",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Fields"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Fields"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Field"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rules."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fields.svg\" alt=\"Fields\" width=\"151\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Fields ::=\n    Fields_ \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-fields_",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Fields_"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Fields_"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "set"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "field"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definitions."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "follows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "semantics"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Sep"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/fields_.svg\" alt=\"Fields_\" width=\"291\" height=\"86\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Fields_ ::=\n    Sep!(Fields_, Field, \",\") \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-ident",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Ident"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Ident"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifier"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "-"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "user"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "value."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/ident.svg\" alt=\"Ident\" width=\"167\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Ident ::=\n     '<ident>' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "examples-of-identifiers",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Examples"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "of"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "identifiers"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "let snot = { \"snot\": \"badger\" };"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "keyword-escaping",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Keyword"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "escaping"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Surrounding"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifier"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "with"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tick"
        },
        {
          "t": "Space"
        },
        {
          "t": "Quoted",
          "c": [
            {
              "t": "SingleQuote"
            },
            [
              {
                "t": "Str",
                "c": "`"
              }
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "keywords"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor’s"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "DSLs"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "escaped"
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "let `let` = 1234.5;"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "emoji",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Emoji"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "You"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "even"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "use"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "emoji"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifiers"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "via"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "escaping"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "mechanism."
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "let `🚀` = \"rocket\";"
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "But"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "we"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "cannot"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "think"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "any"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "good"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "reason"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "do"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "so!"
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-testliteral",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TestLiteral"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "TestLiteral"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specifies"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extractor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "microformat"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "block."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extractor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "takes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "general"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form:"
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "Ident '|' MicroFormat '|'"
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Where"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "ident"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "name"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "builtin"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extractor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "such"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "json"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "base64"
          ]
        },
        {
          "t": "Str",
          "c": "."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Microformat"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "content"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "depends"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "extractor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/testliteral.svg\" alt=\"TestLiteral\" width=\"199\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule TestLiteral ::=\n     '<extractor>' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "extracting-json-embedded-within-strings",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Extracting"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "JSON"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "embedded"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "within"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "strings"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "let example = { \"snot\": \"{\\\"snot\\\": \\\"badger\\\"\" };\nmatch example of\n  case extraction=%{ snot ~= json|| } => extraction.snot\n  default => \"no match\"\nend;"
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "When"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "executed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "this"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "will"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "result"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in:"
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "\"badger\""
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "decoding-base64-embedded-within-strings",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Decoding"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "base64"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "embedded"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "within"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "strings"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "let example = { \"snot\": \"eyJzbm90IjogImJhZGdlciJ9Cg==\" };\nmatch example of\n  case extraction=%{ snot ~= base64|| } => extraction.snot\n  default => \"no match\"\nend;"
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "When"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "executed"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "this"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "will"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "result"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in:"
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "\"{\\\"snot\\\": \\\"badger\\\"}"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "wrap-and-extract",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Wrap"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "and"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Extract"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "We"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "decode"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "base64"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "decoded"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "through"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "composition:"
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "let example = { \"snot\": \"eyJzbm90IjogImJhZGdlciJ9Cg==\" };\nmatch example of\n  case decoded = %{ snot ~= base64|| } =>\n    match { \"snot\": decoded.snot } of\n      case json = %{ snot ~= json|| } => json.snot.snot\n      default => \"no match - json\"\n    end\n  default => \"no match - base64\"\nend;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bytesliteral",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BytesLiteral"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BytesLiteral"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "representation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "opaque"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literals"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "subset"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "bit"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "syntax"
              }
            ],
            [
              "https://www.erlang.org/doc/reference_manual/expressions.html#bit_syntax",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "representation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Erlang"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Programming"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Language."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "We"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "❤️"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Erlang."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "We"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "❤️"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax!"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bytesliteral.svg\" alt=\"BytesLiteral\" width=\"307\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BytesLiteral ::=\n     '<<'  '>>' \n  |  '<<' Bytes  '>>' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "examples-2",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Examples"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "# Import standard tremor binary utility functions\nuse std::binary;\n\n# Structure of a TCP packet header\n#  0                   1                   2                   3\n#  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n# |          Source Port          |        Destination Port       |\n# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n# |                        Sequence Number                        |\n# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n# |                     Acknowledgment Number                     |\n# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n# | Offset|  Res. |     Flags     |             Window            |\n# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n# |            Checksum           |         Urgent Pointer        |\n# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n# |                    Options                    |    Padding    | IGNORED\n# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n# Record representation of a TCP packet\nlet event = {\n  \"src\": {\"port\": 1234},\n  \"dst\": {\"port\": 2345},\n  \"seq\": event,\n  \"ack\": 4567,\n  \"offset\": 1,\n  \"res\": 2,\n  \"flags\": 3,\n  \"win\": 4,\n  \"checksum\": 5,\n  \"urgent\": 6,\n  \"data\": \"snot badger!\"\n};\n\n# Convert the record into a binary encoded TCP packet\nbinary::into_bytes(<<\n  # Header segment\n  event.src.port:16,  event.dst.port:16,\n  event.seq:32,\n  event.ack:32,\n  event.offset:4, event.res:4, event.flags:8, event.win:16,\n  event.checksum:16, event.urgent:16,\n  # Data segment\n  event.data/binary\n>>)"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bytes",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Bytes"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Bytes"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "syntax"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "patterns"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "representation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "legal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bytes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "MUST"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "contain"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "at"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "least"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "one"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "byte"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "segment."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Byte"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "segments"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "are"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comma"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Quoted",
          "c": [
            {
              "t": "SingleQuote"
            },
            [
              {
                "t": "Str",
                "c": ","
              }
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ")"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimited."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bytes.svg\" alt=\"Bytes\" width=\"339\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule Bytes ::=\n    BytesPart \n  | Bytes  ',' BytesPart \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "example-how-do-i-encode-a-tcp-packet",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Example:"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "How"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "do"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "I"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "encode"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "a"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "TCP"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "packet?"
          }
        ]
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "tremor"
          ],
          []
        ],
        "# Convert the record into a binary encoded TCP packet\nbinary::into_bytes(<<\n  # Encode source and destination TCP ports, each 16 bits wide\n  event.src.port:16,  event.dst.port:16,\n  # Encode sequence, 32 bits wide\n  event.seq:32,\n  # Encode acknowldgement, 32 bits wide\n  event.ack:32,\n  # Encode TCP conditioning and flags fields\n  event.offset:4, event.res:4, event.flags:8, event.win:16,\n  # Encode checksum; and urgent bytes from first byte\n  event.checksum:16, event.urgent:16,\n  # Encode data using the encoded length of another binary literal\n  event.data/binary\n>>)"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bytespart",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BytesPart"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BytesPart"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "represents"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sub"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "segment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "encoded"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "If"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "last"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "segment"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bytes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "it"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "arbitrary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "length."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "If"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "not"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "last"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "segment,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "it"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "must"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specify"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "its"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "length"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bits."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bytespart.svg\" alt=\"BytesPart\" width=\"503\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BytesPart ::=\n    SimpleExprImut \n  | SimpleExprImut  ':'  'int' \n  | SimpleExprImut  '/' Ident \n  | SimpleExprImut  ':'  'int'  '/' Ident \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "form-1",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Form"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "part"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "take"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "following"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "general"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form"
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "SimpleExprImut  ':'  'int'  '/' Ident "
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Where:"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "`SimpleExprImut"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "can"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifier"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "encoded."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "A"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "size"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bits,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defaulted"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "based"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "on"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "data"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "being"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "encoded."
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "*"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "An"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "encoding"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "hint"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "an"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "identifier"
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "size-constraints",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Size"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "constraints"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "size"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "must"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "zero"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "greater,"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "up"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "including"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "but"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "no"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "larger"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "than"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "64"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bits."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "encoding-hints",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Encoding"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Hints"
          }
        ]
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Ident"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "binary"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Encoded"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "in"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "binary,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "using"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "network"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "("
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "big"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": ")"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "endian"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "big-unsigned-integer"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Unsigned"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "integer"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "encoding,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "big"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "endian"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "little-unsigned-integer"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Unsigned"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "integer"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "encoding,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "little"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "endian"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "big-signed-integer"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Signed"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "integer"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "encoding,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "big"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "endian"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "little-signed-integer"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Signed"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "integer"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "encoding,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "little"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "endian"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-sep",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "Sep"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Sep"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "LALRPOP"
              }
            ],
            [
              "http://lalrpop.github.io/lalrpop/",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "convenience"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defining"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "macro"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "rule"
              }
            ],
            [
              "http://lalrpop.github.io/lalrpop/tutorial/006_macros.html",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "template"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "common"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "sub"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "Sep"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "DSLs"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "lists"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequences"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "separated"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "specified"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimiter."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "delimiter"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optional"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "final"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "item"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "list"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence."
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Argument"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "T"
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "The"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "term"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "rule"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "-"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "specifies"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "what"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "is"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "to"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "be"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "separated"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "D"
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "The"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "delimiter"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "rule"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "-"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "specifies"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "how"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "elements"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "are"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "separated"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "L"
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "A"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "list"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "of"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "accumulated"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "terms"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/sep.svg\" alt=\"Sep\" width=\"237\" height=\"87\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "macro Sep<L, T, D> ::=\n    T D L \n  | T D ?  \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binop",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinOp"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinOp"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "LALRPOP"
              }
            ],
            [
              "http://lalrpop.github.io/lalrpop/",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "convenience"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defining"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Link",
          "c": [
            [
              "",
              [],
              []
            ],
            [
              {
                "t": "Str",
                "c": "macro"
              },
              {
                "t": "Space"
              },
              {
                "t": "Str",
                "c": "rule"
              }
            ],
            [
              "http://lalrpop.github.io/lalrpop/tutorial/006_macros.html",
              ""
            ]
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "template"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "common"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "sub"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "sequence."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinOp"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "definition"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "DSLs"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "be"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defined"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tersely"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Argument"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Current"
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "The"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "current"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "rule"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "permissible"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "for"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "the"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "LHS"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "of"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "the"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "expression"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Operation"
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "The"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "operation"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "to"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "be"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "performeed"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Next"
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "The"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "current"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "rule"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "permissible"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "for"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "the"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "RHS"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "of"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "the"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "expression"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "macro"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "imposes"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "where"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "left"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "hand"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "side"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "takes"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "higher"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "relative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "right"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "hand"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "side"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expression"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "when"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "interpreted"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "by"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "tremor."
        }
      ]
    },
    {
      "t": "Header",
      "c": [
        3,
        [
          "considerations",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Considerations"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Tremor"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "performs"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compile"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "time"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "optimizations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "such"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "as"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "constant"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "folding."
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "So"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "literal"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "expressions"
        },
        {
          "t": "SoftBreak"
        },
        {
          "t": "Str",
          "c": "of"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "form"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "1 + 2"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "may"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "compile"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "to"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "a"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "constant"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "("
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "3"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "in"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "this"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "case"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": ")"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "have"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "no"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "runtime"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "cost."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binop.svg\" alt=\"BinOp\" width=\"259\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "macro BinOp<Op, Current, Next> ::=\n    ( Current ) ( Op ) Next \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bincmpeq",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinCmpEq"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinCmpEq"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "allows"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comparative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Comparitive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "Equality"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "have"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "same"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "precedence."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bincmpeq.svg\" alt=\"BinCmpEq\" width=\"191\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinCmpEq ::=\n    BinEq \n  | BinCmp \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binor",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinOr"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinOr"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "xor"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binor.svg\" alt=\"BinOr\" width=\"127\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinOr ::=\n     'or' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binxor",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinXor"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinXor"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exclusive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "xor"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "exlusive"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binxor.svg\" alt=\"BinXor\" width=\"135\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinXor ::=\n     'xor' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binand",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinAnd"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinAnd"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "and"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "and"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binand.svg\" alt=\"BinAnd\" width=\"135\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinAnd ::=\n     'and' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binbitxor",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinBitXor"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinBitXor"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "exlusive-or"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "^"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "logical"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "xor"
                            ]
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "exclusive"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binbitxor.svg\" alt=\"BinBitXor\" width=\"119\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinBitXor ::=\n     '^' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binbitand",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinBitAnd"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinBitAnd"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bitwise"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "and"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "&"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "logical"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "and"
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binbitand.svg\" alt=\"BinBitAnd\" width=\"119\" height=\"42\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinBitAnd ::=\n     '&' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bineq",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinEq"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinEq"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "equality"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "=="
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "equality"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "!="
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "non-equality"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bineq.svg\" alt=\"BinEq\" width=\"175\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinEq ::=\n     '==' \n  |  '!=' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-bincmp",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinCmp"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinCmp"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "comparitive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              ">="
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "greater"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "than"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "equal"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "to"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              ">"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "greater"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "than"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "<="
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "less"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "than"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "or"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "equal"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "to"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "<"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "less"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "than"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/bincmp.svg\" alt=\"BinCmp\" width=\"175\" height=\"141\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinCmp ::=\n     '>=' \n  |  '>' \n  |  '<=' \n  |  '<' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binbitshift",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinBitShift"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinBitShift"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "bit"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "shift"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              ">>>"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "bit"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "shift"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "right,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "with"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "1"
                            ]
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "injected"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              ">>"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "bit"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "shift"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "right,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "with"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "0"
                            ]
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "injected"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "<<"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "bit"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "shift"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "left,"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "with"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "0"
                            ]
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "injected"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binbitshift.svg\" alt=\"BinBitShift\" width=\"183\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinBitShift ::=\n     '>>' \n  |  '>>>' \n  |  '<<' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binadd",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinAdd"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinAdd"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "additive"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "+"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "addition"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "-"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "subtraction"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "Note"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "that"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "the"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "+"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "binary"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operation"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "is"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "also"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "used"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "for"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "string"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "concatenation."
        }
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binadd.svg\" alt=\"BinAdd\" width=\"167\" height=\"75\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinAdd ::=\n     '+' \n  |  '-' \n  ;\n"
      ]
    },
    {
      "t": "Header",
      "c": [
        2,
        [
          "rule-binmul",
          [],
          []
        ],
        [
          {
            "t": "Str",
            "c": "Rule"
          },
          {
            "t": "Space"
          },
          {
            "t": "Str",
            "c": "BinMul"
          }
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "Str",
          "c": "The"
        },
        {
          "t": "Space"
        },
        {
          "t": "Code",
          "c": [
            [
              "",
              [],
              []
            ],
            "BinMul"
          ]
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "rule"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "defines"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "multiplicative"
        },
        {
          "t": "Space"
        },
        {
          "t": "Str",
          "c": "operations"
        }
      ]
    },
    {
      "t": "Table",
      "c": [
        [
          "",
          [],
          []
        ],
        [
          null,
          []
        ],
        [
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ],
          [
            {
              "t": "AlignDefault"
            },
            {
              "t": "ColWidthDefault"
            }
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          [
            [
              [
                "",
                [],
                []
              ],
              [
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Operator"
                        }
                      ]
                    }
                  ]
                ],
                [
                  [
                    "",
                    [],
                    []
                  ],
                  {
                    "t": "AlignDefault"
                  },
                  1,
                  1,
                  [
                    {
                      "t": "Plain",
                      "c": [
                        {
                          "t": "Str",
                          "c": "Description"
                        }
                      ]
                    }
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            [
              "",
              [],
              []
            ],
            0,
            [],
            [
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "*"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "multiplication"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "/"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "division"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ],
              [
                [
                  "",
                  [],
                  []
                ],
                [
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Code",
                            "c": [
                              [
                                "",
                                [],
                                []
                              ],
                              "%"
                            ]
                          }
                        ]
                      }
                    ]
                  ],
                  [
                    [
                      "",
                      [],
                      []
                    ],
                    {
                      "t": "AlignDefault"
                    },
                    1,
                    1,
                    [
                      {
                        "t": "Plain",
                        "c": [
                          {
                            "t": "Str",
                            "c": "Binary"
                          },
                          {
                            "t": "Space"
                          },
                          {
                            "t": "Str",
                            "c": "modulo"
                          }
                        ]
                      }
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          [
            "",
            [],
            []
          ],
          []
        ]
      ]
    },
    {
      "t": "Para",
      "c": [
        {
          "t": "RawInline",
          "c": [
            "html",
            "<img src=\"./svg/binmul.svg\" alt=\"BinMul\" width=\"167\" height=\"108\"/>"
          ]
        }
      ]
    },
    {
      "t": "CodeBlock",
      "c": [
        [
          "",
          [
            "ebnf"
          ],
          []
        ],
        "rule BinMul ::=\n     '*' \n  |  '/' \n  |  '%' \n  ;\n"
      ]
    }
  ]
}
