{"version":3,"sources":["dagre-utils.ts","components/Pipeline.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["size","width","height","distributeElements","model","clonedModel","_","nodes","map","node","id","metadata","Object","objectSpread","mapElements","edges","links","link","from","source","to","target","filter","item","find","mapEdges","graph","dagre","Graph","setGraph","rankdir","align","edgesep","ranksep","setDefaultEdgeLabel","forEach","setNode","edge","setEdge","distributeGraph","modelNode","x","y","createNode","name","DefaultNodeModel","require","count","toModel","engine","doc","DiagramModel","pipe","pipeline","interface","inputs","stream","addNode","op","outputs","index","keys","key","addLink","nodeFrom","nodeTo","portOut","addPort","DefaultPortModel","concat","portTo","connectNodes","getDistributedModel","PipelineWidget","_React$Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDrop","files","that","assertThisInitialized","file","reader","FileReader","onload","data","result","toString","Yaml","parse","setDiagramModel","forceUpdate","onabort","console","log","onerror","readAsText","onLoadYaml","bind","onLayout","onClear","inherits","createClass","value","getDiagramModel","distributedModel","react","Button_default","a","variant","onClick","es","accept","_ref","getRootProps","getInputProps","isDragActive","main","className","diagramEngine","React","distributedSerializedDiagram","serializeDiagram","deSerializedModel","deSerializeDiagram","DiagramEngine","installDefaultFactories","App","react_default","createElement","Pipeline_PipelineWidget","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2bf60be.chunk.js","sourcesContent":["import * as dagre from \"dagre\";\nimport * as _ from \"lodash\";\nimport { DiagramModel, NodeModel } from \"storm-react-diagrams\";\n\nconst size = {\n\twidth: 60,\n\theight: 60\n};\n\nexport function distributeElements(model: DiagramModel) {\n\tlet clonedModel: any = _.cloneDeep(model);\n\tlet nodes = distributeGraph(clonedModel);\n\tnodes.forEach((node: dagre.Node) => {\n\t\tlet modelNode: any = clonedModel.nodes.find((item: any) => item.id === node.id);\n\t\tmodelNode.x = node.x - node.width / 2;\n\t\tmodelNode.y = node.y - node.height / 2;\n\t});\n\treturn clonedModel;\n}\n\nfunction distributeGraph(model: DiagramModel) {\n\tlet nodes = mapElements(model);\n\tlet edges = mapEdges(model);\n\tlet graph = new dagre.graphlib.Graph();\n\tgraph.setGraph({ rankdir: 'LR', align: 'UL', edgesep: 50, ranksep: 50 });\n\tgraph.setDefaultEdgeLabel(() => ({}));\n\t//add elements to dagre graph\n\tnodes.forEach(node => {\n\t\tgraph.setNode(node.id, node.metadata);\n\t});\n\tedges.forEach((edge: any) => {\n\t\tif (edge.from && edge.to) {\n\t\t\tgraph.setEdge(edge.from, edge.to);\n\t\t}\n\t});\n\n\t//auto-distribute\n\tdagre.layout(graph);\n\treturn graph.nodes().map(node => graph.node(node));\n}\n\nfunction mapElements(model: any): [any] {\n\treturn model.nodes.map((node: NodeModel) => ({ id: node.id, metadata: { ...size, id: node.id } }));\n}\n\nfunction mapEdges(model: any): [dagre.Edge] {\n\treturn model.links\n\t\t.map((link: any) => ({\n\t\t\tfrom: link.source,\n\t\t\tto: link.target\n\t\t}))\n\t\t.filter(\n\t\t\t(item: any) => model.nodes.find((node: any) => node.id === item.from) && model.nodes.find((node: any) => node.id === item.to)\n\t\t);\n}\n","import {\n  DiagramEngine,\n  DiagramModel,\n  //  DiagramProps,\n  DefaultNodeModel,\n  DefaultPortModel,\n  DiagramWidget,\n  //  DiagramWidget\n} from \"storm-react-diagrams\";\nimport { distributeElements } from \"../dagre-utils\";\nimport * as React from 'react';\nimport ReactDropzone from \"react-dropzone\";\nimport Yaml from 'yaml';\nimport Button from '@material-ui/core/Button';\n\nrequire(\"../../node_modules/storm-react-diagrams/dist/style.min.css\");\n\nfunction createNode(name: string) {\n  return new DefaultNodeModel(name, \"rgb(0,192,255)\");\n}\n\nlet count = 0;\n\nexport function connectNodes(nodeFrom: DefaultNodeModel, nodeTo: DefaultNodeModel) {\n  //just to get id-like structure\n  count++;\n  const portOut = nodeFrom.addPort(new DefaultPortModel(false, `${nodeFrom.name}-out-${count}`, \"Out\"));\n  const portTo = nodeTo.addPort(new DefaultPortModel(true, `${nodeFrom.name}-to-${count}`, \"In\"));\n  return portOut.link(portTo);\n}\n\nexport function toModel(engine: any, doc: any) {\n  let model = new DiagramModel();\n  let pipe = doc.pipeline[0];\n  let map = {};\n\n  pipe.interface.inputs.forEach((stream: string) => {\n    let node = createNode(stream);\n    map[stream] = node;\n    model.addNode(node);\n  });\n\n  if ( pipe.nodes ) {\n    pipe.nodes.forEach((op: any) => {\n      let node = createNode(op.id);\n      map[op.id] = node;\n      model.addNode(node);\n    });\n  }\n\n  pipe.interface.outputs.forEach((stream: string) => {\n    let node = createNode(stream);\n    map[stream] = node;\n    model.addNode(node);\n  });\n\n  let index = 1;\n  if ( pipe.links ) {\n    Object.keys(pipe.links).forEach(function (key) {\n      var from = map[key];\n      pipe.links[key].forEach((target: string) => {\n        var to = map[target];\n        model.addLink(connectNodes(from, to));\n      });\n      from.x = index * 50;\n      index++;\n    });\n  }\n\n  return getDistributedModel(engine, model);\n}\n\nexport interface Props {\n  engine: DiagramEngine;\n  onLayout?: () => void;\n  onClear?: () => void;\n  onLoadYaml?: (yaml: any) => void;\n}\n\n/**\n * Prototype tremor pipeline node editor\n */\nexport class PipelineWidget extends React.Component<Props, any> {\n  constructor(props: Props) {\n    super(props);\n    this.onLoadYaml = this.onLoadYaml.bind(this);\n    this.onLayout = this.onLayout.bind(this);\n    this.onClear = this.onClear.bind(this);\n  }\n\n  onLoadYaml() {\n    const { engine } = this.props;\n    const that = this;\n    var model = toModel(engine, { pipeline: [] });\n    engine.setDiagramModel(model);\n    that.forceUpdate();\n  }\n\n  onDrop = (files: any) => {\n    const { engine } = this.props;\n    const that = this;\n    files.forEach((file: any) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const data: string = reader.result.toString();\n            var doc = Yaml.parse(data);\n            var model = toModel(engine, doc);\n            engine.setDiagramModel(model);\n            that.forceUpdate();\n        };\n        reader.onabort = () => console.log('file reading was aborted');\n        reader.onerror = () => console.log('file reading has failed');\n        reader.readAsText(file);\n    });\n  }\n\n  onClear() {\n    const { engine } = this.props;\n    let model = new DiagramModel();\n    engine.setDiagramModel(model);\n    this.forceUpdate();\n  }\n\n  onLayout() {\n    const { engine } = this.props;\n    const model = engine.getDiagramModel();\n    let distributedModel = getDistributedModel(engine, model);\n    engine.setDiagramModel(distributedModel);\n    this.forceUpdate();\n  }\n\n  render() {\n    const { engine } = this.props;\n\n    return (\n      <div>\n        <Button variant=\"contained\" onClick={this.onLayout}>Layout</Button>\n        <Button variant=\"contained\" onClick={this.onClear}>Clear</Button>\n        <ReactDropzone accept=\".yaml\" onDrop={this.onDrop}>\n        {({getRootProps, getInputProps, isDragActive}) => {\n          return (\n            <div\n              {...getRootProps()}\n              // className={classNames('dropzone', {'dropzone--isActive': isDragActive})}\n            >\n              <input {...getInputProps()} />\n              {\n                isDragActive ?\n                  <p>Drop files here...</p> :\n                  <p>Try dropping some files here, or click to select files to upload.</p>\n              }\n            </div>\n          )\n        }}\n        </ReactDropzone>\n        <div>\n          <DiagramWidget className=\"pipeline-canvas\" diagramEngine={engine} />\n        </div>\n      </div >\n    );\n  }\n}\n\nexport function getDistributedModel(engine: any, model: DiagramModel) {\n  const serialized: any = model.serializeDiagram();\n  const distributedSerializedDiagram = distributeElements(serialized);\n\n  //deserialize the model\n  let deSerializedModel = new DiagramModel();\n  deSerializedModel.deSerializeDiagram(distributedSerializedDiagram, engine);\n  return deSerializedModel;\n}\n\n/*\nexport function gui() {\n  let engine = new DiagramEngine();\n  engine.installDefaultFactories();\n  let model = new DiagramModel();\n  let model2 = getDistributedModel(engine, model);\n  engine.setDiagramModel(model2);\n  // var props = {\n  //   diagramEngine: engine,\n  //   maxNumberPointsPerLink: 0 // no extra points so link selection is fired straight away\n  // } as DiagramProps;\n  return (<PipelineWidget engine={engine} />);\n};\n*/\n","import React, { Component } from 'react';\nimport './App.css';\nimport { PipelineWidget } from \"./components/Pipeline\";\nimport { DiagramEngine, DiagramModel } from \"storm-react-diagrams\";\nrequire(\"./components/Pipeline.css\");\n\nlet engine = new DiagramEngine();\nengine.installDefaultFactories();\nlet model = new DiagramModel();\nengine.setDiagramModel(model);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PipelineWidget engine={engine} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}